buildscript {

    repositories {

        jcenter()
        mavenCentral()
        maven { url = 'https://files.minecraftforge.net/maven' }
    }

    dependencies {

        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'eclipse'

version = "v${mod_version}-${forge_version.replaceAll("-.*", "")}"
group = "${mod_group}"
ext.version = "${mod_version}"
ext.id = "${mod_id}"
ext.name = "${mod_name}"
ext.author = "${mod_author}"
ext.description = "${mod_description}"
ext.url = "${mod_url}"
ext.loader = "${loader_version.replaceAll("\\..*", "")}"
ext.forge = "${loader_version}"
ext.mc = "${mc_version}"

// need this here so eclipse task generates correctly.
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {

    mappings channel: "${mcp_channel}", version: "${mcp_version}"
//    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {

        client {

            workingDirectory project.file('run')
            jvmArgs.addAll("-ea")
        }

        server {

            workingDirectory project.file('run')
            jvmArgs.addAll("-ea")
        }
    }

}

configurations.all {

    resolutionStrategy.eachDependency { DependencyResolveDetails details ->

        if (details.requested.group + ":" + details.requested.name == "org.lwjgl.lwjgl:lwjgl-platform") {

            details.useVersion "2.9.4-nightly-20150209"
        }
    }
}

repositories {

    mavenLocal()
}

dependencies {

    minecraft "net.minecraftforge:forge:${forge_version}"
    compileOnly fileTree(dir: 'libs', include: ['*.jar'])
}

processResources {

    // this will ensure that this task is redone when the versions change.
    inputs.property "mod_id", project.ext.id
    inputs.property "mod_name", project.ext.name
    inputs.property "mod_name2", project.ext.name.replaceAll("\\s", "")
    inputs.property "mod_version", project.ext.version
    inputs.property "mod_group", project.group
    inputs.property "mod_url", project.ext.url
    inputs.property "mod_description", project.ext.description
    inputs.property "mod_author", project.ext.author
    inputs.property "loader_version", project.ext.loader
    inputs.property "forge_version", project.ext.forge
    inputs.property "mc_version", project.ext.mc

    // replace stuff in mods.toml and pack.mcmeta
    from(sourceSets.main.resources.srcDirs) {

        include 'mcmod.info', 'pack.mcmeta'

        expand (

                'mod_id': project.ext.id,
                'mod_name': project.ext.name,
                'mod_name2': project.ext.name.replaceAll("\\s", ""),
                'mod_version': project.ext.version,
                'mod_group': project.group,
                'mod_url': project.ext.url,
                'mod_description': project.ext.description,
                'mod_author': project.ext.author,
                'loader_version': project.ext.loader,
                'forge_version': project.ext.forge,
                'mc_version': project.ext.mc
        )
    }

    // copy everything else except mods.toml and pack.mcmeta
    from(sourceSets.main.resources.srcDirs) {

        exclude 'mcmod.info', 'pack.mcmeta'
    }
}

ext.jarAttributes = [

        "Specification-Title"           : project.id,
        "Specification-Version"         : project.ext.version,
      